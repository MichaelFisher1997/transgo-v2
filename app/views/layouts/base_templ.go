// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package layouts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "app/views/components"

func Base(content templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\" class=\"h-full\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Transogo Media</title><script src=\"https://unpkg.com/htmx.org@1.9.6\"></script><link rel=\"stylesheet\" href=\"/static/css/output.css\"></head><body class=\"h-full bg-gray-100 text-gray-900 dark:bg-gray-900 dark:text-gray-100\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Nav().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<main class=\"min-h-full\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = content.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</main><script>\n\t\t\t// On page load, check for saved theme\n\t\t\tdocument.addEventListener('DOMContentLoaded', () => {\n\t\t\t\t// Check if user has a saved preference\n\t\t\t\tconst savedTheme = localStorage.getItem('theme');\n\t\t\t\t\n\t\t\t\t// Apply saved theme or use system preference as fallback\n\t\t\t\tif (savedTheme === 'dark' || (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\n\t\t\t\t\tdocument.documentElement.classList.add('dark');\n\t\t\t\t} else {\n\t\t\t\t\tdocument.documentElement.classList.remove('dark');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Update icon based on current theme\n\t\t\t\tupdateThemeIcon();\n\t\t\t});\n\n\t\t\t// Theme toggle functionality\n\t\t\tconst themeToggle = document.getElementById('theme-toggle');\n\t\t\tif (themeToggle) {\n\t\t\t\tthemeToggle.addEventListener('click', () => {\n\t\t\t\t\t// Toggle dark class\n\t\t\t\t\tdocument.documentElement.classList.toggle('dark');\n\t\t\t\t\t\n\t\t\t\t\t// Save preference to localStorage\n\t\t\t\t\tif (document.documentElement.classList.contains('dark')) {\n\t\t\t\t\t\tlocalStorage.setItem('theme', 'dark');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlocalStorage.setItem('theme', 'light');\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Update icon\n\t\t\t\t\tupdateThemeIcon();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Function to update the icon based on current theme\n\t\t\tfunction updateThemeIcon() {\n\t\t\t\tconst isDark = document.documentElement.classList.contains('dark');\n\t\t\t\tconst iconContainer = document.getElementById('theme-toggle');\n\t\t\t\t\n\t\t\t\t// Clear existing icon\n\t\t\t\tif (iconContainer) {\n\t\t\t\t\ticonContainer.innerHTML = '';\n\t\t\t\t\t\n\t\t\t\t\t// Add appropriate icon based on theme\n\t\t\t\t\tif (isDark) {\n\t\t\t\t\t\t// Moon icon for dark mode\n\t\t\t\t\t\ticonContainer.innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n\t\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\n\t\t\t\t\t\t</svg>`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Sun icon for light mode\n\t\t\t\t\t\ticonContainer.innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n\t\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 3v1m0 16v1m8.66-15.66l-.707.707M4.34 19.66l-.707.707M21 12h-1M4 12H3m15.66 8.66l-.707-.707M4.34 4.34l-.707-.707\" />\n\t\t\t\t\t\t</svg>`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
