name: CI/CD Pipeline

on:
  push:
    branches:
      - '**' # Trigger on push to any branch

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure package-lock.json is at root
        run: |
          if [ -f app/package-lock.json ]; then
            cp app/package-lock.json .
          fi
          if [ -f app/package.json ]; then
            cp app/package.json .
          fi

      - name: Get branch name
        id: get-branch
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-')" >> $GITHUB_ENV

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: go.sum
      
      - name: Install templ
        run: |
          go install github.com/a-h/templ/cmd/templ@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Verify Node installation
        run: |
          echo "Node version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "PATH: $PATH"
      
      - name: Install Node dependencies
        working-directory: app
        run: |
          if ! command -v npm &> /dev/null; then
            echo "npm not found! Reinstalling Node.js"
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          npm install
      - name: Generate templates
        run: cd app && templ generate -path ./views && cd ..
      - name: Setup Static Files
        run: |
          mkdir -p app/static/css
          cd app
          if [ ! -f package.json ]; then
            npm init -y
          fi
          npm install -D tailwindcss postcss autoprefixer
          npx tailwindcss init -p
          if [ ! -f ./static/css/styles.css ]; then
            echo "@tailwind base;" > ./static/css/styles.css
            echo "@tailwind components;" >> ./static/css/styles.css
            echo "@tailwind utilities;" >> ./static/css/styles.css
          fi
          npx tailwindcss -i ./static/css/styles.css -o ./static/css/output.css
          cd ..
          touch app/static/.gitkeep
          chmod -R 755 app/static
      - name: Build
        run: ls && go build ./...
      - name: Test
        run: go test ./...

      - name: Check for AWS Credentials
        id: check-aws-creds
        run: |
          if [ -n "$AWS_ACCESS_KEY_ID" ] && [ -n "$AWS_SECRET_ACCESS_KEY" ]; then
            echo "AWS credentials detected"
            echo "has_creds=true" >> $GITHUB_OUTPUT
          elif [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ] && [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "GitHub secrets detected"
            echo "has_creds=true" >> $GITHUB_OUTPUT
          else
            echo "No AWS credentials found - running in local test mode"
            echo "has_creds=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and Test Only
        if: steps.check-aws-creds.outputs.has_creds == 'false'
        run: |
          echo "Running in local test mode - skipping AWS deployment steps"
          go build ./...
          go test ./...

      - name: Configure AWS credentials
        if: steps.check-aws-creds.outputs.has_creds == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        if: steps.check-aws-creds.outputs.has_creds == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        if: steps.check-aws-creds.outputs.has_creds == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.BRANCH_NAME }}:${{ github.sha }}
          file: ./Dockerfile

      - name: Create Terraform environment directory
        if: steps.check-aws-creds.outputs.has_creds == 'true'
        run: |
          mkdir -p infra/terraform/environments/${{ env.BRANCH_NAME }}
          cp infra/terraform/environments/template/* infra/terraform/environments/${{ env.BRANCH_NAME }}/

      - name: Setup Terraform
        if: steps.check-aws-creds.outputs.has_creds == 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        if: steps.check-aws-creds.outputs.has_creds == 'true'
        run: |
          cd infra/terraform/environments/${{ env.BRANCH_NAME }}
          terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Apply
        if: steps.check-aws-creds.outputs.has_creds == 'true'
        id: terraform-deploy
        run: |
          cd infra/terraform/environments/${{ env.BRANCH_NAME }}
          terraform apply -auto-approve
          echo "task_definition_arn=$(terraform output -raw task_definition_arn)" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Deploy to ECS
        if: steps.check-aws-creds.outputs.has_creds == 'true'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.terraform-deploy.outputs.task_definition_arn }}
          service: transgo-service
          cluster: transgo-cluster-${{ env.BRANCH_NAME }}
          wait-for-service-stability: true
