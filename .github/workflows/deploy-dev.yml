name: Deploy to Dev Environment

on:
  push:
    branches: [ main, dev ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: transgo-dev
  ECS_SERVICE: transgo-service
  ECS_CLUSTER: transgo-cluster-dev
  ECS_TASK_DEFINITION: ${{ github.workspace }}/updated-task-definition.json

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }} .
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          docker tag ${{ env.ECR_REPOSITORY }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_CLUSTER }} \
            --query taskDefinition > ${{ env.ECS_TASK_DEFINITION }}

      - name: Fill in the new image ID in the task definition
        run: |
          sed -i "s|<IMAGE>|${{ env.IMAGE_URI }}|g" ${{ env.ECS_TASK_DEFINITION }}

      - name: Register new task definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://${{ env.ECS_TASK_DEFINITION }}

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_CLUSTER }}

      - name: Get ALB DNS name
        id: alb-dns
        run: |
          DNS_NAME=$(aws elbv2 describe-load-balancers --names transgo-alb-dev --query 'LoadBalancers[0].DNSName' --output text)
          echo "ALB_DNS_NAME=$DNS_NAME" >> $GITHUB_OUTPUT
          echo "Application URL: http://$DNS_NAME"

      - name: Output ALB DNS
        run: |
          echo "Application deployed to: http://${{ steps.alb-dns.outputs.ALB_DNS_NAME }}"
